<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ux_client_script">
    <sys_ux_client_script action="INSERT_OR_UPDATE">
        <controller_preset/>
        <includes/>
        <macroponent display_value="Team Calendar">2cdc72911ba9d510b5bd2fc02a4bcb28</macroponent>
        <name>Event popover start/end times</name>
        <preset/>
        <required_translations/>
        <script><![CDATA[/**
 * @param {params} params
 * @param {api} params.api
 * @param {any} params.imports
 */
function evaluateProperty({
    api,
    helpers
}) {
    const {
        startTimeConvertedDisplay,
        endTimeConvertedDisplay,
        start,
        end,
        childEvents,
        category
    } = api.state.popoverTemplate.event;

    if (start === "" || end === "" || !startTimeConvertedDisplay || !endTimeConvertedDisplay)
        return "";

    let timeFormat = api.context.session.user.timeFormat;
    if (timeFormat.indexOf(':ss') > -1) {
        timeFormat = timeFormat.replace(
            ':ss',
            ''
        );
    }

    const getDayHrMinSec = (diffInSeconds) => {
        let numberOfDays = Math.floor(diffInSeconds / (60 * 60 * 24));
        diffInSeconds = diffInSeconds - numberOfDays * (60 * 60 * 24);
        if (numberOfDays > 0) {
            numberOfDays = numberOfDays == 1 ? numberOfDays + ' ' + helpers.translateSync('Day') : numberOfDays + ' ' + helpers.translateSync('Days');
        } else {
            numberOfDays = '';
        }

        let numberOfHours = Math.floor(diffInSeconds / (60 * 60));
        diffInSeconds = diffInSeconds - numberOfHours * (60 * 60);
        if (numberOfHours > 0) {
            numberOfHours = numberOfHours == 1 ? numberOfHours + ' ' + helpers.translateSync('Hour') : numberOfHours + ' ' + helpers.translateSync('Hours');
        } else {
            numberOfHours = '';
        }

        let numberOfMinutes = Math.floor(diffInSeconds / (60));
        diffInSeconds = diffInSeconds - numberOfMinutes * (60);
        if (numberOfMinutes > 0) {
            numberOfMinutes = numberOfMinutes == 1 ? numberOfMinutes + ' ' + helpers.translateSync('Minute') : numberOfMinutes + ' ' + helpers.translateSync('Minutes');
        } else {
            numberOfMinutes = '';
        }

        let numberofSeconds = diffInSeconds;
        if (numberofSeconds > 0) {
            numberofSeconds = numberofSeconds == 1 ? numberofSeconds + ' ' + helpers.translateSync('Second') : numberofSeconds + ' ' + helpers.translateSync('Seconds');
        } else {
            numberofSeconds = '';
        }
        return {
            numberOfDays,
            numberOfHours,
            numberOfMinutes,
            numberofSeconds
        };

    };

    const getTotalTimeWorked = (events) => {
        let totalTimeWorkedDuration = '';
        let totalTimeworkedInSeconds = 0;
        events.map(event => {
            const {
                start,
                end,
                schedule: {
                    eventType
                }
            } = event;
            if (eventType.sysId === api.state.timeWorkedEvent.sysId) {
                const startFormatted = start.split(' ')[0].split('-')[1] + '/' + start.split(' ')[0].split('-')[2] + '/' + start.split(' ')[0].split('-')[0] + ' ' + start.split(' ')[1];
                const endFormatted = end.split(' ')[0].split('-')[1] + '/' + end.split(' ')[0].split('-')[2] + '/' + end.split(' ')[0].split('-')[0] + ' ' + end.split(' ')[1];
                const startTime = new Date(startFormatted);
                const endTime = new Date(endFormatted);
                let diffInSeconds = Math.floor((endTime.getTime() - startTime.getTime()) / 1000);
                totalTimeworkedInSeconds = totalTimeworkedInSeconds + diffInSeconds;
            }
        });

        const {
            numberOfDays,
            numberOfHours,
            numberOfMinutes,
            numberofSeconds
        } = getDayHrMinSec(totalTimeworkedInSeconds);
        const durationString = numberOfDays + ' ' + numberOfHours + ' ' + numberOfMinutes;
        return helpers.translateSync('Total Time Worked') + ' - ' + durationString;;
    };


    if (category == api.state.timeWorkedEvent.category) {
        return getTotalTimeWorked(childEvents);
    }
    const getDurationString = (start, end) => {
        const startFormatted = start.split(' ')[0].split('-')[1] + '/' + start.split(' ')[0].split('-')[2] + '/' + start.split(' ')[0].split('-')[0] + ' ' + start.split(' ')[1];
        const endFormatted = end.split(' ')[0].split('-')[1] + '/' + end.split(' ')[0].split('-')[2] + '/' + end.split(' ')[0].split('-')[0] + ' ' + end.split(' ')[1];
        const startTime = new Date(startFormatted);
        const endTime = new Date(endFormatted);
        let diffInSeconds = Math.floor((endTime.getTime() - startTime.getTime()) / 1000);
        const {
            numberOfDays,
            numberOfHours,
            numberOfMinutes,
            numberofSeconds
        } = getDayHrMinSec(diffInSeconds);
        const durationString = numberOfDays + ' ' + numberOfHours + ' ' + numberOfMinutes + ' ' + numberofSeconds;

        return durationString;
    };

    const durationString = getDurationString(start, end).trim();
    const startTime = start.split(' ')[1];
    const endTime = end.split(' ')[1];
    return `${startTimeConvertedDisplay} - ${endTimeConvertedDisplay} (${durationString})`;
}]]></script>
        <script_api_version>2.0.0</script_api_version>
        <sys_class_name>sys_ux_client_script</sys_class_name>
        <sys_created_by>trevor.roberts</sys_created_by>
        <sys_created_on>2022-08-25 16:26:28</sys_created_on>
        <sys_id>22fcba911ba9d510b5bd2fc02a4bcbd1</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Event popover start/end times</sys_name>
        <sys_package display_value="Integrated Staff Production" source="x_snc_integrated_1">c0b0ef5c1b6dd914b5bd2fc02a4bcb9a</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrated Staff Production">c0b0ef5c1b6dd914b5bd2fc02a4bcb9a</sys_scope>
        <sys_update_name>sys_ux_client_script_22fcba911ba9d510b5bd2fc02a4bcbd1</sys_update_name>
        <sys_updated_by>trevor.roberts</sys_updated_by>
        <sys_updated_on>2022-08-25 16:26:28</sys_updated_on>
        <target>macroponent</target>
        <type>transform</type>
    </sys_ux_client_script>
</record_update>
