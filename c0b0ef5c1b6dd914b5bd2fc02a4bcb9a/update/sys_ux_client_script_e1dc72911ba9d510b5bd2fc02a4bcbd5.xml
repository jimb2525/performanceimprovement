<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ux_client_script">
    <sys_ux_client_script action="INSERT_OR_UPDATE">
        <controller_preset/>
        <includes/>
        <macroponent display_value="Team Calendar">2cdc72911ba9d510b5bd2fc02a4bcb28</macroponent>
        <name>Update event filters</name>
        <preset/>
        <required_translations/>
        <script><![CDATA[/**
 * @param {params} params
 * @param {api} params.api
 * @param {any} params.event
 * @param {any} params.imports
 * @param {ApiHelpers} params.helpers
 */
function handler({api, event, helpers, imports}) {
    let filter = api.state.eventFilters.filter;
    let filterConfig = api.state.eventFilters.filterConfig;
    let selectedIds = event.payload.selectedIds;
    let table = event.payload.table;
    let field = event.payload.field;
    let tableAndField = table + '.' + field;
    let filters = event.payload.filters;
    api.setState("filters", filters);

    if(!table || !field){
         api.setState('eventFilters', {
            filter: {},
            filterConfig: {}
        });
        api.emit('TEAM_CALENDAR#REFRESH_REQUESTED');
        return;
    }

    if (!selectedIds || selectedIds.length <= 0) {
        //Remove appropraite keys from the filter object entirely
        let newFilter = {};
        for (let i in filter) {
            if (filter.hasOwnProperty(i)) {
                if (i !== table)
                    newFilter[i] = filter[i];
                else {
                    let fieldCount = 0;
                    newFilter[i] = {};
                    for (let j in filter[i]) {
                        if(filter[i].hasOwnProperty(j) && j !== field) {
                            newFilter[i][j] = filter[i][j];
                            fieldCount += 1;
                        }
                    }
                    //Remove table if there are no fields to filter on
				    if (fieldCount <= 0) delete newFilter[i];
                }
            }
        }

        let newFilterConfig = { ...filterConfig };
        delete newFilterConfig[tableAndField];

        api.setState('eventFilters', {
            filter: newFilter,
            filterConfig: newFilterConfig
        });
    }
    else {
        api.setState('eventFilters', {
            filter: {
                ...filter,
                [table]: {
                    ...filter[table],
                    [field]: selectedIds
                }
            },
            filterConfig: {
                ...filterConfig,
                [tableAndField]: selectedIds
            }
        });
    }
   //Refresh Calendar
    api.emit('TEAM_CALENDAR#REFRESH_REQUESTED');
}]]></script>
        <script_api_version>2.0.0</script_api_version>
        <sys_class_name>sys_ux_client_script</sys_class_name>
        <sys_created_by>trevor.roberts</sys_created_by>
        <sys_created_on>2022-08-25 16:25:52</sys_created_on>
        <sys_id>e1dc72911ba9d510b5bd2fc02a4bcbd5</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Update event filters</sys_name>
        <sys_package display_value="Integrated Staff Production" source="x_snc_integrated_1">c0b0ef5c1b6dd914b5bd2fc02a4bcb9a</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrated Staff Production">c0b0ef5c1b6dd914b5bd2fc02a4bcb9a</sys_scope>
        <sys_update_name>sys_ux_client_script_e1dc72911ba9d510b5bd2fc02a4bcbd5</sys_update_name>
        <sys_updated_by>trevor.roberts</sys_updated_by>
        <sys_updated_on>2022-08-25 16:25:52</sys_updated_on>
        <target>macroponent</target>
        <type>default</type>
    </sys_ux_client_script>
</record_update>
