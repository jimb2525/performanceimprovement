<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ux_client_script">
    <sys_ux_client_script action="INSERT_OR_UPDATE">
        <controller_preset/>
        <includes/>
        <macroponent display_value="Add work shift view">6b2d3ad11ba9d510b5bd2fc02a4bcbc3</macroponent>
        <name>Add/remove agents from work shift</name>
        <preset/>
        <required_translations/>
        <script><![CDATA[/**
 * @param {params} params
 * @param {api} params.api
 * @param {any} params.event
 * @param {any} params.imports
 * @param {ApiHelpers} params.helpers
 */
async function handler({ api, event, helpers, imports }) {
    const { status, screenParams } = event.payload;
    const { selectedAgents, agentsInWorkShift } = api.state;
    const scheduleShift = screenParams && screenParams.sys_id || api.context.props.workShiftSysId;

    if (status === 'modified') {
        api.setState('isFormDirty', true);
    } else if (scheduleShift !== '-1' && (status === 'inserted' || status === 'updated')) {
        const addedAgents = selectedAgents.filter(agent1 => !agentsInWorkShift.find(agent2 => agent1.id === agent2.id));
        const removedAgents = agentsInWorkShift.filter(agent1 => !selectedAgents.find(agent2 => agent1.id === agent2.id));

        if (api.state.isFormDirty || addedAgents.length || removedAgents.length) {
            const updateWorkShiftResult = await helpers.snHttp('/api/sn_shift_planning/shift_planning/update_work_shift', {
                method: 'POST',
                body: {
                    addAgents: addedAgents.map(agent => agent.id),
                    removeAgents: removedAgents.map(agent => agent.id),
                    scheduleShift
                }
            }).then(resp => resp.response.result);

            await helpers.snHttp('/api/sn_shift_planning/shift_planning/create_schedules', {
                method: 'POST',
                body: {
                    scheduleShift
                }
            });

            await helpers.snHttp('/api/sn_shift_planning/shift_planning/shift_overlap', {
                method: 'POST',
                body: {
                    addAgents: updateWorkShiftResult.addedAgents,
                    scheduleShift: updateWorkShiftResult.workShift
                }
            });

            api.emit('SCHEDULE_PLAN_SIDEBAR#FETCH_SESSION_MESSAGE');
            api.setState('isFormDirty', false);
        }

        api.emit('SCHEDULE_PLAN_SIDEBAR#OPEN_SCHEDULE_PLAN', {
            sysId: api.context.props.schedulePlanSysId
        });

        api.emit('SCHEDULE_PLAN_SIDEBAR#REFRESH_CALENDAR');
    }
}]]></script>
        <script_api_version>2.0.0</script_api_version>
        <sys_class_name>sys_ux_client_script</sys_class_name>
        <sys_created_by>trevor.roberts</sys_created_by>
        <sys_created_on>2022-08-25 16:27:25</sys_created_on>
        <sys_id>983d7ad11ba9d510b5bd2fc02a4bcb5a</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Add/remove agents from work shift</sys_name>
        <sys_package display_value="Integrated Staff Production" source="x_snc_integrated_1">c0b0ef5c1b6dd914b5bd2fc02a4bcb9a</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrated Staff Production">c0b0ef5c1b6dd914b5bd2fc02a4bcb9a</sys_scope>
        <sys_update_name>sys_ux_client_script_983d7ad11ba9d510b5bd2fc02a4bcb5a</sys_update_name>
        <sys_updated_by>trevor.roberts</sys_updated_by>
        <sys_updated_on>2022-08-25 16:27:25</sys_updated_on>
        <target>macroponent</target>
        <type>default</type>
    </sys_ux_client_script>
</record_update>
